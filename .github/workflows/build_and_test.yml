# This starter workflow is for a CMake project running on a single platform. There is a different starter workflow if you need cross-platform coverage.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-multi-platform.yml
name: Build & Test

on:
  workflow_call:
    inputs:
      build_type:
        required: true
        type: string
        default: "Release"
        description: "Build type to by used by CMake"
      expect_fail:
        required: false
        type: boolean
        default: false
        description: "Set to true if you expect the build to fail"
      cpp_standard:
        required: true
        type: number
        description: "C++ standard to compile with. Must be a number e.g. 17 / 20 / 23 / etc."
      version_major:
        required: true
        type: number
      version_minor:
        required: true
        type: number
      version_patch:
        required: true
        type: number

env:
  BUILD_DIR: /tmp/build

jobs:
  build:
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/honigkuchen/${{ github.event.repository.name }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Build
      run: |
        set -e
        result=0
        cmake -DCMAKE_BUILD_TYPE=${{inputs.build_type}} \
          -DCMAKE_CXX_STANDARD:INT=${{inputs.cpp_standard}} \
          -DPROJECT_VERSION_MAJOR:INT=${{inputs.version_major}} \
          -DPROJECT_VERSION_MINOR:INT=${{inputs.version_minor}} \
          -DPROJECT_VERSION_PATCH:INT=${{inputs.version_patch}} \
          --preset GithubMakefileConfigurationPreset
        cmake --build --preset GithubMakefileBuildPreset || result=$?
        if [ "$result" -eq 0 ] && [ ${{inputs.expect_fail}} = true ]; then
          echo "Build successful, but expected to fail."
          exit 1
        fi
        if [ "$result" -ne 0 ] && [ ${{inputs.expect_fail}} = false ]; then
          echo "Build failed, but expected to succeed."
          exit 1
        fi
        exit 0

    - if: ${{ inputs.expect_fail == false }}
      name: Test
      working-directory: ${{env.BUILD_DIR}}
      run: |
        ctest -C ${{inputs.build_type}} \
            --test-dir test \
            --output-junit junit_result.xml \
            --output-on-failure

    - name: Upload test results
      uses: actions/upload-artifact@v4
      with:
        name: Test results
        path: ${{env.BUILD_DIR}}/test/junit_result.xml
        if-no-files-found: error
    
    - name: Benchmark
      run: |
        ${{env.BUILD_DIR}}/benchmark/coding-library_benchmark --v=2

    - name: Benchmark to file
      run: |
        ${{env.BUILD_DIR}}/benchmark/coding-library_benchmark \
          --benchmark_out=${{env.BUILD_DIR}}/benchmark/benchmark.json \
          --benchmark_out_format=json \
          --v=2

    - name: Upload benchmark results
      uses: actions/upload-artifact@v4
      with:
        name: Benchmark results
        path: ${{env.BUILD_DIR}}/benchmark/benchmark.json
        if-no-files-found: error